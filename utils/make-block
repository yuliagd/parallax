#!/usr/bin/env node

const fs       = require('fs');
const path     = require('path');

const minimist = require('minimist');
const mkdirp   = require('mkdirp');
const Mustache = require('mustache');

const createDirectory = function(normalized) {
    return new Promise((resolve, reject) => {
        const dirName = path.join('./src/blocks', normalized);
        fs.exists(dirName, (exists) => {
            if (exists) {
                reject(new Error('Block already exists: ' + normalized));
            } else {
                resolve(dirName);
            }
        });
    }).then((dirName) => {
        return new Promise((resolve, reject) => {
            mkdirp(dirName, (err) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(dirName);
                }
            });
        });
    });
};

const readTemplate = function(type) {
    const templateFile = `./src/templates/block.${type}.mustache`;
    return new Promise((resolve, reject) => {
        fs.readFile(templateFile, 'utf8', (err, data) => {
            if (err) {
                reject(err);
            } else {
                resolve(data);
            }
        });
    });
};

const renderTemplate = function(dirName, blockName, type) {
    const outputFile = path.join(dirName, blockName + '.' + type);
    return readTemplate(type)
        .then((templateData) => {
            const result = Mustache.render(templateData.toString(), {
                block: blockName
            });
            return new Promise((resolve, reject) => {
                fs.writeFile(outputFile, result, 'utf8', (err) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            });
        });
};

const usageStr = 
`Usage: make-block BLOCK... [OPTION]...
Create one or multiple BLOCK(s)

Select implementation technologies:
  -a, --all     Generate .scss, .pug, and .js files (default)
  -c, --css     Generate a .scss file for block styles
  -h, --html    Generate a .pug file for block markup
  -j, --js      Generate a .js file for block behavior`;

const opts = minimist(process.argv.slice(2));

if (opts._.length === 0) {
    console.error(usageStr);
    process.exit(1);
}

let params;

if (Object.keys(opts).length > 1) {
    params = {};

    Object.keys(opts).forEach((option) => {
        switch (option) {
        case '_':
            break;
        case 'a':
        case 'all':
            params = {
                pug: true,
                scss: true,
                js: true,
            }
            break;
        case 'h':
        case 'html':
            params.pug = true;
            break;
        case 'c':
        case 'css':
            params.scss = true;
            break;
        case 'j':
        case 'js':
            params.js = true;
            break;
        default:
            console.error('Uknown option:', option);
            console.error('');
            console.error(usageStr);
            process.exit(1);
        }
    });
} else {
    params = {
        pug  : true,
        scss : true,
        js   : true,
    };
}

const results = opts._.map((file) => {
    return new Promise((resolve, reject) => {
        const normalized = path.normalize(file);

        if (path.isAbsolute(normalized) || normalized.startsWith('..')) {
            return reject(new Error('Invalid block name: ' + normalized));
        }

        const blockName = path.basename(normalized);
        if (!/^[a-z](-?[a-z0-9])*$/.test(blockName)) {
            return reject(new Error('Invalid block name: ' + normalized));
        }

        resolve(createDirectory(normalized).then((dirName) => {
            const results = [];
            for (const type in params) {
                if (params.hasOwnProperty(type)) {
                    results.push(renderTemplate(dirName, blockName, type));
                }
            }
            return Promise.all(results);
        }));
    });
});

Promise.all(results).catch((err) => {
    console.error(err.message);
    process.exit(1);
});
