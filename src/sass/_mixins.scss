/// Breakpoint & up (toggle on the given screen size and above)
/// @param {String} $name - Breakpoint name
/// @group breakpoints
/// @require breakpoints-up
@mixin breakpoint-up($name) {
    @if map-has-key($breakpoints-up, $name) {
        @media (min-width: #{map-get($breakpoints-up, $name)}) {
            @content;
        }
    } @else {
        @error "Invalid breakpoint name: `#{$name}`.";
    }
}

/// Breakpoint & down (toggle on the given screen size and below)
/// @param {String} $name - Breakpoint name
/// @group breakpoints
/// @require breakpoints-down
@mixin breakpoint-down($name) {
    @if map-has-key($breakpoints-down, $name) {
        @media (max-width: #{map-get($breakpoints-down, $name)}) {
            @content;
        }
    } @else {
        @error "Invalid breakpoint name: `#{$name}`.";
    }
}

/// Breakpoint & only (toggle on the given screen size only)
/// @param {String} $name - Breakpoint name
/// @group breakpoints
/// @require breakpoints-only
@mixin breakpoint-only($name) {
    @if map-has-key($breakpoints-only, $name) {
        $breakpoints: map-get($breakpoints-only, $name);
        @media (min-width: #{nth($breakpoints, 1)}) and
            (max-width: #{nth($breakpoints, 2)}) {
            @content;
        }
    } @else {
        @error "Invalid breakpoint name: `#{$name}`.";
    }
}

/// Clear floated content within a container
/// @group helpers
@mixin clearfix() {
    &:after {
        content: " ";
        display: block;
        clear: both;
    }
}

/// Responsive fixed-width container
/// @group layout
/// @require $container-md $container-lg $container-xl $gutter
@mixin container() {
    padding: 0 $gutter;

    @include breakpoint-up(md) {
        width: $container-md;
        margin: 0 auto;
    }

    @include breakpoint-up(lg) {
        width: $container-lg;
    }

    @include breakpoint-up(xl) {
        width: $container-xl;
    }
}

/// Rem font sizing
/// @param {String} $size - Font size in pixels
/// @group helpers
/// @require $font-size-default
@mixin font-size($size) {
    font-size: $size;
    /* stylelint-disable-next-line declaration-block-no-duplicate-properties */
    font-size: ($size / $font-size-default) + rem;
}

/// Accessible hiding
/// @group helpers
@mixin visually-hidden() {
    position: absolute;
    height: 1px;
    margin: -1px;
    padding: 0;
    width: 1px;
    border: 0;
    clip: rect(0 0 0 0); 
    
    overflow: hidden;
}
